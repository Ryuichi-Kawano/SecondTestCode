数学的思考をプログラムにするヒント
(全体的な話編)
①まずは図を書きましょう。めんどくさくても手元に紙が
なくても、メモ帳でもチラシの裏でもいいので書きましょう。
	理由：①脳みその中だけで考えられる量とか正確性には
		限界がある→そしてそれはかなり早く訪れる。
		意外と、この限界に到達したことが分からず、
		ただただ、「わからない」と悩む。
		②脳みそだけでもの考えてるんじゃなくて、体を
		動かすこととリンクしている。程よく体の一部を
		動かす(手と目など)と、理解がしやすくなる。
②ある方向から解決しようとしてうまくいかないときは、
	反対方向から考える。
	当たり判定で言うと→「当たる条件」ばかりを考えがち
	だけど、「当たらない条件」を考えたほうがスムーズに
	行くことがある。
③いっぺんに全部考えるとわからなくなるので、属性/性質
	ごとに分けて考えよう。数学で言うと「軸ごとに分けて
	考える」とわかりやすい場合がある。
	(例)物理的な問題で、なんか投げた場合の着地点
	を計算する場合、まずY軸についてだけ考える。
	軸ごとに分けるとわかりやす事がある。
	直交座標系の軸ごとに分けて考える場合と
	極座標系の要素ごとに分けて考える場合がある

(幾何学編)
①形状を表す構造体を作る
	座標=ベクトル
	struct Vector2{
		float x,y;
	}
	using Position2=Vector2;
	矩形だったら
	struct Rect{
		Position2 center;//中心
		float w,h;//幅/2、高さ/2
	}
	円だったら
	struct Circle{
		Position2 center;//中心点
		float radius;//半径
	}
	このように図形を表せる構造体を定義する
	例えば…「線分(Segment)」
	struct Segment{
		Position2 a;//端点A
		Position2 b;//端点B
	}
	
②便利な関数とかを作りましょう(MagnitudeとかNormalize)
	Magnitude:大きさ Lengthでも構わない。Distance。中身がhypot(x,y),x*x+y*y
	Normalize:正規化→単位ベクトルにする x/mag , y/mag
③オペレータオーバーロードを作りましょう	
	ベクトルとしての演算をしたい箇所がたくさんある。
	V(x,y) W(x,y)
	(V+W).x=V.x+W.x
	(V+W).y=V.y+W.y

(演算子オーバーロード+-=くらいは)
Vector2 a,b;

c=a+b;//ベクトルとしての足し算

operator+(const Vector2& lval,const Vector2& rval)


cA,cB

auto v= cB.pos-cA.pos;
cA.r+cB.r>=hypot(v.x,v.y);
cA.r+cB.r>=sqrt(v.x*v.x+v.y*v.y);

(cA.r+cB.r)^2>=(v.x*v.x+v.y*v.y)
auto t= cA.r+cB.r;
t*t>=(v.x*v.x+v.y*v.y)


C言語における三角関数
sin(角度)=y/r
cos(角度)=x/r
tan(角度)=y/x

これの逆関数として
asin(y/r)=角度(rad)//90°からの線対称の区別がつかない
→60°と120°の区別がつかない
sin(π/3)=sin(2π/3)=√3/2だから

acos(x/r)=角度(rad)//0°/180°からの線対称の区別がつかない
→cos(π/3)=cos(-π/3)=cos(5π/3)=1/2

atan(y/x)=角度(rad)
これは180度ごとに周期的なので、0～と180～の区別が
つかない。++/--の時が同じだから

どれを使っても、正しい角度が測れない。
atan2は、xとyを分離した引数とすることにより、0～360が正しく測れる。
※使用時の注意点
atan2(y,x)の順番で入れてください。
これ、ちょっと油断するとすぐやらかすので
注意してください。






