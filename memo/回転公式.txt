行列について
行列は基本的には「座標変換」に活用されるものです。
(ゲームにおいてはです。別分野だと「線形代数」と言って
数値解析などに使われます→ディープラーニング等)

ゲームで言うところの行列はせいぜい4x4行列です。
行列のnxnの数ですが、次元数＋１だと思っといてください。

２Ｄゲームなら上限が3x3行列です。2+1=3なので
３Ｄゲームなら上限が4x4行列です。3+1=4なので
平行移動まで表すためにこうなっています。

ちなみに、すでにゲームアーキテクチャの授業で
DrawModiGraphを使ったと思いますが、あの関数は
画像の４点を指定することで、画像を自由変形しますが
DrawModiGraphひとつあれば、
DrawRotaGraphもDrawExpandGraphも必要ない。
4点を指定するので、4点の置き方で回転にもなるし、
拡大縮小にもなる。

なので、DrawRectGraphは、行列によって回転し、
その回転の結果得られた座標をDrawModiGraphに投げています。


直交座標表現と、極座標表現について
普通の座標系では、x方向にpいって、y方向にq行く
そうした場合座標をP(p,q)と書く、これを「直交座標」という

これに対して、
この座標P(p,q)の原点からの距離がrであり、
Ｘ軸(基準軸)とのなす角度がθであるとする。

d=√(p*p+q*q)
φ=atan2(q,p)

という感じで、距離と角度によってもその場所は表現できる
つまり同じ座標PをP(d,φ)とも書ける。これを「極座標」と
いう。

Gimpだと
x→θ
y→r

|cos -sin|
|sin cos|(p,q)


P(d,φ)⇒P(p,q)

P(dcosφ,dsinφ)

θ回転すると考える

P'(d,θ+φ)
P'(dcos(θ+φ),dsin(θ+φ))

加法定理
cos(θ+φ)=cosθcosφ-sinθsinφ
sin(θ+φ)=sinθcosφ+sinφcosθ

P'(dcosφcosθ-dsinφsinθ,dsinφcosθ+dcosφsinθ)
P(dcosφ,dsinφ)=P(p,q)でした。

p=dcosφ,q=dsinφ
を考慮すると
式P'(dcosφcosθ-dsinφsinθ,dsinφcosθ+dcosφsinθ)

は
P'(pcosθ-qsinθ,psinθ+qcosθ)

(p,q)|cosθ  sinθ  |=(p',q')
	 |-sinθ cosθ  |


|cosθ -sinθ||p|=|pcosθ-qsinθ|
|sinθ  cosθ||q| |psinθ+qcosθ|


任意座標C中心回転の場合は
①Cの座標が原点になるように頂点座標を引き算
②回転の式による回転
③①で引き算したものを足す→これで中心がCにもどる

P-=C(平行移動)C'
P*=R(回転)R
P+=C(平行移動)C
の３つの操作が必要

行列の場合それぞれの操作を行列で表すと
事前に乗算をしておくことで、操作を合成することができる

M=C'*R*C
合成済みの行列Mを計算しておけば…

P*=M
で済むようになる。4点ありましたが、すべての点に対して
この合成行列Mを書けるだけで済む。

例えば3Dとかの場合、頂点が4点どころか4万頂点あるわけ。
そういう場合に、事前に計算済みの行列があると
かなり、計算量を減らせますよ。
→3Dでは、行列使われまくり。

回転だけだったら2x2で済むのですが、平行移動があると
3x3にする必要があります。
→どういうことか


(x,y)|a b|=(ax+cy,bx+dy)
     |c d|
     
純粋にx座標に3を足したい。これって可能？
2x2のどこに3を入れても、xやyからの乗算が行われる
何がまずいかというと、純粋な3がありえなくなる
→なので、しかたなく、3x3行列にして、
さらに(x,y)ではなく、(x,y,1)にして平行移動する

(x,y,1)|a b 0|=(ax+cy+p,bx+dy+q)
       |c d 0|
	   |p q 1|

この計算におけるpとqが平行移動を表す。
(p,q)が足される平行移動。

(x,y,1)|c  s  0||1 0 0|
       |-s c  0||0 1 0|
	   |0  0  1||0 0 1|

単位行列(かけても変化しない)
|1 0 0|
|0 1 0|
|0 0 1|

単位行列の下部分に平行移動を入れる
(x,y,1)|c  s  0||1 0 0|
       |-s c  0||0 1 0|
	   |0  0  1||a b 1|

合成行列M=
| c s 0|
|-s c 0|
| a b 1|


合成は乗算を行うことで計算できる



|1 0||x|=|x|
|0 1||y| |y|
x方向に1、y方向に2移動したい
|1 b||x|=|x+by|
|c 1||y| |cx+y|

by=1
cx=2
無理！なので、1次元増やす(この次元を
同次座標系といいます)

|1 0 a||x|=|x+a|
|0 1 b||y| |y+b|
|0 0 1||1| |1|


|1 0 a||x|=|x+2a|
|0 1 b||y| |y+2b|
|0 0 1||2| | 2  |

2Dの同次座標系の3番目の要素は常に１

|1 0 a||x|=|x+0a|
|0 1 b||y| |y+0b|
|0 0 1||0| | 0  |

(x,y,1)|1 0 1|=(x,y,x+2y+1)
       |0 1 2|
       |0 0 1|


(x,y,1)|1 0 0|=(x+1,y+2,1)
       |0 1 0|
       |1 2 1|

行優先、列優先とかいうんですが、
これが統一されてない
数学の世界や、OpenGL系だと、
右にベクトルが来ます。



AxBxCxDxExF





